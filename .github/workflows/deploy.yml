name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm (required for apply/destroy)'
        required: false
        type: string
      auto_approve:
        description: 'Auto-approve changes (use with caution)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: eu-west-2

jobs:
  # Matrix job for linting and validation
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        tool: [fmt, validate, tflint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"
      
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      
      - name: Terraform Format Check
        if: matrix.tool == 'fmt'
        working-directory: terraform
        run: |
          echo " Checking Terraform formatting..."
          terraform fmt -check -recursive
          echo "Format check passed"
      
      - name: Terraform Validate
        if: matrix.tool == 'validate'
        working-directory: terraform
        run: |
          echo " Validating Terraform configuration..."
          terraform validate
          echo "Configuration validation passed"
      
      - name: Install and Run TFLint
        if: matrix.tool == 'tflint'
        run: |
          echo "Installing and running TFLint..."
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init --chdir=terraform
          tflint --chdir=terraform
          echo "TFLint security checks completed"

  # Main deployment job
  deploy:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"
      
      - name: Require Manual Confirmation
        if: github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy'
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
            echo "Deployment not confirmed!"
            echo "Type 'DEPLOY' in the confirm_deployment field to proceed with ${{ github.event.inputs.action }}"
            echo "This prevents accidental deployments and ensures you're ready to proceed"
            exit 1
          fi
          echo "Deployment confirmed for ${{ github.event.inputs.action }} to ${{ github.event.inputs.environment }}"
      
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: terraform
        timeout-minutes: 10
        env:
          TF_VAR_next_public_supabase_anon_key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            echo "Generating destroy plan..."
            terraform plan -destroy -out=tfplan -input=false
          else
            echo "Generating apply plan..."
            terraform plan -out=tfplan -input=false
          fi
      
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: terraform
        timeout-minutes: 15
        env:
          TF_VAR_next_public_supabase_anon_key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            echo "Applying changes with auto-approve..."
            terraform apply -auto-approve tfplan
          else
            echo "Applying changes..."
            terraform apply tfplan
          fi
          echo "Infrastructure deployment completed successfully"
      
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: terraform
        timeout-minutes: 15
        env:
          TF_VAR_next_public_supabase_anon_key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            echo " Destroying infrastructure with auto-approve..."
            terraform destroy -auto-approve
          else
            echo " Destroying infrastructure..."
            terraform destroy
          fi
          echo " Infrastructure destruction completed"
      
      - name: Output ALB DNS
        if: github.event.inputs.action == 'apply'
        working-directory: terraform
        run: |
          echo "ALB DNS Name:"
          terraform output -raw alb_dns_name
          echo ""
          echo " Copy this DNS name and update your DNS manually!"
          
      
      - name: Cleanup on Failure
        if: failure()
        working-directory: terraform
        run: |
          echo " Workflow failed, attempting cleanup..."
          echo "Attempting to force unlock state if locked..."
          terraform force-unlock -force || echo "No lock to unlock or unlock failed"
          echo "Cleanup completed"